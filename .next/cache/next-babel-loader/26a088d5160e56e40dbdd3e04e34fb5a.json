{"ast":null,"code":"var _jsxFileName = \"/Users/jeremiproulx/Desktop/DEV/NEXTJS/test1/components/scene.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport { MTLLoader, OBJLoader } from 'three-obj-mtl-loader'; // var loader = new THREE.ObjectLoader();\n// loader.load(\n// \t// resource URL\n// \t\"models/json/example.json\",\n// \t// onLoad callback\n// \t// Here the loaded data is assumed to be an object\n// \tfunction ( obj ) {\n// \t\t// Add the loaded object to the scene\n// \t\tscene.add( obj );\n// \t},\n// \t// onProgress callback\n// \tfunction ( xhr ) {\n// \t\tconsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n// \t},\n// \t// onError callback\n// \tfunction ( err ) {\n// \t\tconsole.error( 'An error happened' );\n// \t}\n// );\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n    this.threecanvas = React.createRef();\n  }\n\n  componentDidMount() {\n    window.THREE = THREE; // THREE.NRRDLoader expects THREE to be a global object\n\n    require('three/examples/js/loaders/OBJLoader');\n\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.threecanvas.current.appendChild(renderer.domElement);\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    var loader = new THREE.ObjectLoader();\n    loader.load('/hand.obj', function (object) {\n      scene.add(object);\n    });\n    scene.add(cube);\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"three-container\",\n      ref: this.threecanvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/jeremiproulx/Desktop/DEV/NEXTJS/test1/components/scene.js"],"names":["React","Component","THREE","MTLLoader","OBJLoader","Scene","constructor","props","threecanvas","createRef","componentDidMount","window","require","scene","camera","PerspectiveCamera","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","current","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","loader","ObjectLoader","load","object","add","position","z","animate","requestAnimationFrame","rotation","x","y","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,SAAR,EAAmBC,SAAnB,QAAmC,sBAAnC,C,CAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAC1BK,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmBR,KAAK,CAACS,SAAN,EAAnB;AACH;;AACDC,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,MAAM,CAACT,KAAP,GAAeA,KAAf,CADe,CACO;;AACtBU,IAAAA,OAAO,CAAC,qCAAD,CAAP;;AACA,QAAIC,KAAK,GAAG,IAAIX,KAAK,CAACG,KAAV,EAAZ;AACA,QAAIS,MAAM,GAAG,IAAIZ,KAAK,CAACa,iBAAV,CAA6B,EAA7B,EAAiCJ,MAAM,CAACK,UAAP,GAAkBL,MAAM,CAACM,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb;AACA,QAAIC,QAAQ,GAAG,IAAIhB,KAAK,CAACiB,aAAV,EAAf;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBT,MAAM,CAACK,UAAzB,EAAqCL,MAAM,CAACM,WAA5C;AACA,SAAKT,WAAL,CAAiBa,OAAjB,CAAyBC,WAAzB,CAAsCJ,QAAQ,CAACK,UAA/C;AACA,QAAIC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAIxB,KAAK,CAACyB,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAf;AACA,QAAIC,IAAI,GAAG,IAAI3B,KAAK,CAAC4B,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAX;AAGA,QAAIK,MAAM,GAAG,IAAI7B,KAAK,CAAC8B,YAAV,EAAb;AACAD,IAAAA,MAAM,CAACE,IAAP,CAAY,WAAZ,EAAwB,UAAWC,MAAX,EAAoB;AACpCrB,MAAAA,KAAK,CAACsB,GAAN,CAAWD,MAAX;AAEH,KAHL;AAOArB,IAAAA,KAAK,CAACsB,GAAN,CAAWN,IAAX;AACAf,IAAAA,MAAM,CAACsB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AACA,QAAIC,OAAO,GAAG,YAAY;AACxBC,MAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAT,MAAAA,IAAI,CAACW,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAZ,MAAAA,IAAI,CAACW,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACAxB,MAAAA,QAAQ,CAACyB,MAAT,CAAiB9B,KAAjB,EAAwBC,MAAxB;AACD,KALD;;AAMAwB,IAAAA,OAAO;AACV;;AACDK,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,EAAE,EAAC,iBAAR;AAA0B,MAAA,GAAG,EAAE,KAAKnC,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAxCyB;;AA2C9B,eAAeH,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport {MTLLoader, OBJLoader} from 'three-obj-mtl-loader';\n\n\n// var loader = new THREE.ObjectLoader();\n\n// loader.load(\n// \t// resource URL\n// \t\"models/json/example.json\",\n\n// \t// onLoad callback\n// \t// Here the loaded data is assumed to be an object\n// \tfunction ( obj ) {\n// \t\t// Add the loaded object to the scene\n// \t\tscene.add( obj );\n// \t},\n\n// \t// onProgress callback\n// \tfunction ( xhr ) {\n// \t\tconsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n// \t},\n\n// \t// onError callback\n// \tfunction ( err ) {\n// \t\tconsole.error( 'An error happened' );\n// \t}\n// );\n\nclass Scene extends Component {\n    constructor(props){\n        super(props);\n        this.threecanvas = React.createRef();\n    }\n    componentDidMount(){\n        window.THREE = THREE; // THREE.NRRDLoader expects THREE to be a global object\n        require('three/examples/js/loaders/OBJLoader');\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n        var renderer = new THREE.WebGLRenderer();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        this.threecanvas.current.appendChild( renderer.domElement );\n        var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n        var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n        var cube = new THREE.Mesh( geometry, material );\n\n\n        var loader = new THREE.ObjectLoader();\n        loader.load('/hand.obj',function ( object ) {\n                scene.add( object );\n\n            }\n        );\n        \n\n        scene.add( cube );\n        camera.position.z = 5;\n        var animate = function () {\n          requestAnimationFrame( animate );\n          cube.rotation.x += 0.01;\n          cube.rotation.y += 0.01;\n          renderer.render( scene, camera );\n        };\n        animate();\n    }\n    render(){\n        return (\n            <div id=\"three-container\" ref={this.threecanvas} />\n        )\n    }\n}\n\nexport default Scene;"]},"metadata":{},"sourceType":"module"}