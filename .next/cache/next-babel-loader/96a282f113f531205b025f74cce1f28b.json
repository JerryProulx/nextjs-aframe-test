{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeremiproulx/Desktop/DEV/NEXTJS/test1/components/scene.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport * as THREE from 'three'; // import {MTLLoader, OBJLoader} from 'three-obj-mtl-loader';\n\nimport * as OBJLoader from 'three-obj-loader';\nOBJLoader(THREE); // var loader = new THREE.ObjectLoader();\n// loader.load(\n// \t// resource URL\n// \t\"models/json/example.json\",\n// \t// onLoad callback\n// \t// Here the loaded data is assumed to be an object\n// \tfunction ( obj ) {\n// \t\t// Add the loaded object to the scene\n// \t\tscene.add( obj );\n// \t},\n// \t// onProgress callback\n// \tfunction ( xhr ) {\n// \t\tconsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n// \t},\n// \t// onError callback\n// \tfunction ( err ) {\n// \t\tconsole.error( 'An error happened' );\n// \t}\n// );\n\nvar Scene =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Scene, _Component);\n\n  function Scene(props) {\n    var _this;\n\n    _classCallCheck(this, Scene);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Scene).call(this, props));\n    _this.threecanvas = React.createRef();\n    _this.THREE = THREE;\n    return _this;\n  }\n\n  _createClass(Scene, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // window.THREE = THREE; // THREE.NRRDLoader expects THREE to be a global object\n      // require('three/examples/js/loaders/TextureLoader');\n      var scene = new this.THREE.Scene();\n      var camera = new this.THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      var renderer = new this.THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      this.threecanvas.current.appendChild(renderer.domElement);\n      var geometry = new this.THREE.BoxGeometry(1, 1, 1);\n      var cube;\n      var loader = new this.THREE.TextureLoader(); // let mtlLoader = new MTLLoader();\n\n      var objLoader = new this.THREE.OBJLoader();\n      objLoader.load( // resource URL\n      '/hand.obj', // called when resource is loaded\n      function (object) {\n        scene.add(object);\n      }, // called when loading is in progresses\n      function (xhr) {\n        console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n      }, // called when loading has errors\n      function (error) {\n        console.log('An error happened');\n      }); // objLoader.setMaterials(materials)\n      // objLoader.load('/hand.obj', (object) => {\n      //     scene.add(object)\n      // })\n      // mtlLoader.load('/hand.mtl', (materials) => {\n      // materials.preload()\n      // objLoader.setMaterials(materials)\n      // objLoader.load('/hand.obj', (object) => {\n      //     scene.add(object)\n      // })\n      // })\n\n      loader.load('/logo.png', function (texture) {\n        // in this example we create the material when the texture is loaded\n        var material = new THREE.MeshBasicMaterial({\n          map: texture\n        });\n        cube = new THREE.Mesh(geometry, material);\n        scene.add(cube);\n        animate();\n      }); // var loader = new THREE.ObjectLoader();\n      // loader.load('/hand.obj',function ( object ) {\n      //         scene.add( object );\n      //     }\n      // );\n\n      camera.position.z = 5;\n\n      var animate = function animate() {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        id: \"three-container\",\n        ref: this.threecanvas,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Scene;\n}(Component);\n\nexport default Scene;","map":{"version":3,"sources":["/Users/jeremiproulx/Desktop/DEV/NEXTJS/test1/components/scene.js"],"names":["React","Component","THREE","OBJLoader","Scene","props","threecanvas","createRef","scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","current","appendChild","domElement","geometry","BoxGeometry","cube","loader","TextureLoader","objLoader","load","object","add","xhr","console","log","loaded","total","error","texture","material","MeshBasicMaterial","map","Mesh","animate","position","z","requestAnimationFrame","rotation","x","y","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\n// import {MTLLoader, OBJLoader} from 'three-obj-mtl-loader';\n\nimport * as OBJLoader from 'three-obj-loader';\nOBJLoader(THREE);\n\n\n// var loader = new THREE.ObjectLoader();\n\n// loader.load(\n// \t// resource URL\n// \t\"models/json/example.json\",\n\n// \t// onLoad callback\n// \t// Here the loaded data is assumed to be an object\n// \tfunction ( obj ) {\n// \t\t// Add the loaded object to the scene\n// \t\tscene.add( obj );\n// \t},\n\n// \t// onProgress callback\n// \tfunction ( xhr ) {\n// \t\tconsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n// \t},\n\n// \t// onError callback\n// \tfunction ( err ) {\n// \t\tconsole.error( 'An error happened' );\n// \t}\n// );\n\nclass Scene extends Component {\n    constructor(props){\n        super(props);\n        this.threecanvas = React.createRef();\n        this.THREE = THREE;\n    }\n    componentDidMount(){\n        // window.THREE = THREE; // THREE.NRRDLoader expects THREE to be a global object\n        // require('three/examples/js/loaders/TextureLoader');\n        \n        var scene = new this.THREE.Scene();\n        var camera = new this.THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n        var renderer = new this.THREE.WebGLRenderer();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        this.threecanvas.current.appendChild( renderer.domElement );\n        var geometry = new this.THREE.BoxGeometry( 1, 1, 1 );\n        var cube;\n\n        var loader = new this.THREE.TextureLoader();\n\n        // let mtlLoader = new MTLLoader();\n \n        let objLoader = new this.THREE.OBJLoader();\n\n        objLoader.load(\n            // resource URL\n            '/hand.obj',\n            // called when resource is loaded\n            function ( object ) {\n        \n                scene.add( object );\n        \n            },\n            // called when loading is in progresses\n            function ( xhr ) {\n        \n                console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\n        \n            },\n            // called when loading has errors\n            function ( error ) {\n        \n                console.log( 'An error happened' );\n        \n            }\n        );\n        \n\n        // objLoader.setMaterials(materials)\n        // objLoader.load('/hand.obj', (object) => {\n        //     scene.add(object)\n        // })\n        // mtlLoader.load('/hand.mtl', (materials) => {\n        // materials.preload()\n        // objLoader.setMaterials(materials)\n        // objLoader.load('/hand.obj', (object) => {\n        //     scene.add(object)\n        // })\n        // })\n\n        loader.load('/logo.png', function ( texture ) {\n                // in this example we create the material when the texture is loaded\n                var material = new THREE.MeshBasicMaterial( {\n                    map: texture\n                 } );\n\n                 cube = new THREE.Mesh( geometry, material );\n                 scene.add( cube );\n                 animate();\n            }\n        );\n\n        // var loader = new THREE.ObjectLoader();\n        // loader.load('/hand.obj',function ( object ) {\n        //         scene.add( object );\n\n        //     }\n        // );\n        \n        camera.position.z = 5;\n        var animate = function () {\n          requestAnimationFrame( animate );\n          cube.rotation.x += 0.01;\n          cube.rotation.y += 0.01;\n          renderer.render( scene, camera );\n        };\n        \n    }\n    render(){\n        return (\n            <div id=\"three-container\" ref={this.threecanvas} />\n        )\n    }\n}\n\nexport default Scene;"]},"metadata":{},"sourceType":"module"}