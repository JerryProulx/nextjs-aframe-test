{"ast":null,"code":"var _jsxFileName = \"/Users/jeremiproulx/Desktop/DEV/NEXTJS/test1/components/scene.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols'; // import {MTLLoader, OBJLoader} from 'three-obj-mtl-loader';\n\nimport * as OBJLoader from 'three-obj-loader';\nOBJLoader(THREE); // var loader = new THREE.ObjectLoader();\n// loader.load(\n// \t// resource URL\n// \t\"models/json/example.json\",\n// \t// onLoad callback\n// \t// Here the loaded data is assumed to be an object\n// \tfunction ( obj ) {\n// \t\t// Add the loaded object to the scene\n// \t\tscene.add( obj );\n// \t},\n// \t// onProgress callback\n// \tfunction ( xhr ) {\n// \t\tconsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n// \t},\n// \t// onError callback\n// \tfunction ( err ) {\n// \t\tconsole.error( 'An error happened' );\n// \t}\n// );\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n    this.threecanvas = React.createRef();\n    this.THREE = THREE;\n  }\n\n  componentDidMount() {\n    // window.THREE = THREE; // THREE.NRRDLoader expects THREE to be a global object\n    // require('three/examples/js/loaders/TextureLoader');\n    var scene = new this.THREE.Scene();\n    var camera = new this.THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    var renderer = new this.THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.threecanvas.current.appendChild(renderer.domElement);\n    var geometry = new this.THREE.BoxGeometry(1, 1, 1);\n    var cube;\n    var object;\n    var controls = new OrbitControls(camera, renderer.domElement);\n    controls.target.set(0, 0, 0);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.enableZoom = true;\n    var loader = new this.THREE.TextureLoader();\n    var ship_material = new THREE.MeshBasicMaterial({\n      color: 0x444444\n    }); // objLoader.setMaterials(materials)\n\n    objLoader.load('/hand.obj', obj => {\n      obj.traverse(function (child) {\n        if (child instanceof THREE.Mesh) {\n          child.material = ship_material;\n        }\n      });\n      scene.add(obj);\n      animate();\n    });\n    loader.load('/logo.png', function (texture) {\n      // in this example we create the material when the texture is loaded\n      var material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      cube = new THREE.Mesh(geometry, material);\n      scene.add(cube);\n    });\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      object.translateZ(-10);\n      renderer.render(scene, camera);\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"three-container\",\n      ref: this.threecanvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/jeremiproulx/Desktop/DEV/NEXTJS/test1/components/scene.js"],"names":["React","Component","THREE","OrbitControls","OBJLoader","Scene","constructor","props","threecanvas","createRef","componentDidMount","scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","current","appendChild","domElement","geometry","BoxGeometry","cube","object","controls","target","set","enableDamping","dampingFactor","enableZoom","loader","TextureLoader","ship_material","MeshBasicMaterial","color","objLoader","load","obj","traverse","child","Mesh","material","add","animate","texture","map","requestAnimationFrame","rotation","x","y","translateZ","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols'\n// import {MTLLoader, OBJLoader} from 'three-obj-mtl-loader';\n\nimport * as OBJLoader from 'three-obj-loader';\nOBJLoader(THREE);\n\n\n// var loader = new THREE.ObjectLoader();\n\n// loader.load(\n// \t// resource URL\n// \t\"models/json/example.json\",\n\n// \t// onLoad callback\n// \t// Here the loaded data is assumed to be an object\n// \tfunction ( obj ) {\n// \t\t// Add the loaded object to the scene\n// \t\tscene.add( obj );\n// \t},\n\n// \t// onProgress callback\n// \tfunction ( xhr ) {\n// \t\tconsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n// \t},\n\n// \t// onError callback\n// \tfunction ( err ) {\n// \t\tconsole.error( 'An error happened' );\n// \t}\n// );\n\nclass Scene extends Component {\n    constructor(props){\n        super(props);\n        this.threecanvas = React.createRef();\n        this.THREE = THREE;\n    }\n    componentDidMount(){\n        // window.THREE = THREE; // THREE.NRRDLoader expects THREE to be a global object\n        // require('three/examples/js/loaders/TextureLoader');\n        \n        var scene = new this.THREE.Scene();\n        var camera = new this.THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n        camera.position.z = 5;\n        var renderer = new this.THREE.WebGLRenderer();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        this.threecanvas.current.appendChild( renderer.domElement );\n        var geometry = new this.THREE.BoxGeometry( 1, 1, 1 );\n        var cube;\n        var object;\n        var controls = new OrbitControls( camera, renderer.domElement );\n        controls.target.set( 0, 0, 0 )\n        controls.enableDamping = true\n        controls.dampingFactor = 0.25\n        controls.enableZoom = true\n\n        var loader = new this.THREE.TextureLoader();\n\n\n\n        var ship_material = new THREE.MeshBasicMaterial( { color: 0x444444 } );\n\n        // objLoader.setMaterials(materials)\n        objLoader.load('/hand.obj', (obj) => {\n            obj.traverse( function( child ) {\n                if ( child instanceof THREE.Mesh ) {\n                    child.material = ship_material;\n                }\n            } );\n            scene.add( obj );\n            animate();\n        })\n\n        loader.load('/logo.png', function ( texture ) {\n                // in this example we create the material when the texture is loaded\n                var material = new THREE.MeshBasicMaterial( {\n                    map: texture\n                 } );\n\n                 cube = new THREE.Mesh( geometry, material );\n                 scene.add( cube );\n                 \n            }\n        );\n\n        \n        camera.position.z = 5;\n        var animate = function () {\n          requestAnimationFrame( animate );\n          cube.rotation.x += 0.01;\n          cube.rotation.y += 0.01;\n          object.translateZ( -10 );\n          renderer.render( scene, camera );\n        };\n        \n    }\n    render(){\n        return (\n            <div id=\"three-container\" ref={this.threecanvas} />\n        )\n    }\n}\n\nexport default Scene;"]},"metadata":{},"sourceType":"module"}