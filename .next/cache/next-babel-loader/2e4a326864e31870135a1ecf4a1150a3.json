{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jeremiproulx/Desktop/DEV/NEXTJS/test1/components/scene.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport THREE from \"./three\";\nimport { MTLLoader, OBJLoader } from 'three-obj-mtl-loader'; // var loader = new THREE.ObjectLoader();\n// loader.load(\n// \t// resource URL\n// \t\"models/json/example.json\",\n// \t// onLoad callback\n// \t// Here the loaded data is assumed to be an object\n// \tfunction ( obj ) {\n// \t\t// Add the loaded object to the scene\n// \t\tscene.add( obj );\n// \t},\n// \t// onProgress callback\n// \tfunction ( xhr ) {\n// \t\tconsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n// \t},\n// \t// onError callback\n// \tfunction ( err ) {\n// \t\tconsole.error( 'An error happened' );\n// \t}\n// );\n\nvar Scene =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Scene, _Component);\n\n  function Scene(props) {\n    var _this;\n\n    _classCallCheck(this, Scene);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Scene).call(this, props));\n    _this.threecanvas = React.createRef();\n    return _this;\n  }\n\n  _createClass(Scene, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(THREE);\n      var scene = new THREE.Scene();\n      var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      var renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      this.threecanvas.current.appendChild(renderer.domElement);\n      var geometry = new THREE.BoxGeometry(1, 1, 1);\n      var material = new THREE.MeshBasicMaterial({\n        color: 0x00ff00\n      });\n      var cube = new THREE.Mesh(geometry, material); // let mtlLoader = new MTLLoader();\n      // let objLoader = new OBJLoader();\n      // mtlLoader.load('/hand.mtl', (materials) => {\n      //     materials.preload()\n      //     objLoader.setMaterials(materials)\n      //     objLoader.load('/hand.obj', (object) => {\n      //         scene.add(object)\n      //     })\n      // })\n\n      scene.add(cube);\n      camera.position.z = 5;\n\n      var animate = function animate() {\n        requestAnimationFrame(animate);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      };\n\n      animate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        id: \"three-container\",\n        ref: this.threecanvas,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Scene;\n}(Component);\n\nexport default Scene;","map":{"version":3,"sources":["/Users/jeremiproulx/Desktop/DEV/NEXTJS/test1/components/scene.js"],"names":["React","Component","THREE","MTLLoader","OBJLoader","Scene","props","threecanvas","createRef","console","log","scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","current","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAAQC,SAAR,EAAmBC,SAAnB,QAAmC,sBAAnC,C,CAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;IAEMC,K;;;;;AACF,iBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,+EAAMA,KAAN;AACA,UAAKC,WAAL,GAAmBP,KAAK,CAACQ,SAAN,EAAnB;AAFc;AAGjB;;;;wCACkB;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACA,UAAIS,KAAK,GAAG,IAAIT,KAAK,CAACG,KAAV,EAAZ;AACA,UAAIO,MAAM,GAAG,IAAIV,KAAK,CAACW,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb;AACA,UAAIC,QAAQ,GAAG,IAAIf,KAAK,CAACgB,aAAV,EAAf;AACAD,MAAAA,QAAQ,CAACE,OAAT,CAAkBL,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C;AACA,WAAKT,WAAL,CAAiBa,OAAjB,CAAyBC,WAAzB,CAAsCJ,QAAQ,CAACK,UAA/C;AACA,UAAIC,QAAQ,GAAG,IAAIrB,KAAK,CAACsB,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAf;AACA,UAAIC,QAAQ,GAAG,IAAIvB,KAAK,CAACwB,iBAAV,CAA6B;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAA7B,CAAf;AACA,UAAIC,IAAI,GAAG,IAAI1B,KAAK,CAAC2B,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAX,CATe,CAWf;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAd,MAAAA,KAAK,CAACmB,GAAN,CAAWF,IAAX;AACAhB,MAAAA,MAAM,CAACmB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AACA,UAAIC,OAAO,GAAG,SAAVA,OAAU,GAAY;AACxBC,QAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAL,QAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,QAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACApB,QAAAA,QAAQ,CAACqB,MAAT,CAAiB3B,KAAjB,EAAwBC,MAAxB;AACD,OALD;;AAMAqB,MAAAA,OAAO;AACV;;;6BACO;AACJ,aACI;AAAK,QAAA,EAAE,EAAC,iBAAR;AAA0B,QAAA,GAAG,EAAE,KAAK1B,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;;;;EA3CeN,S;;AA8CpB,eAAeI,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport THREE from \"./three\";\nimport {MTLLoader, OBJLoader} from 'three-obj-mtl-loader';\n\n\n// var loader = new THREE.ObjectLoader();\n\n// loader.load(\n// \t// resource URL\n// \t\"models/json/example.json\",\n\n// \t// onLoad callback\n// \t// Here the loaded data is assumed to be an object\n// \tfunction ( obj ) {\n// \t\t// Add the loaded object to the scene\n// \t\tscene.add( obj );\n// \t},\n\n// \t// onProgress callback\n// \tfunction ( xhr ) {\n// \t\tconsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n// \t},\n\n// \t// onError callback\n// \tfunction ( err ) {\n// \t\tconsole.error( 'An error happened' );\n// \t}\n// );\n\nclass Scene extends Component {\n    constructor(props){\n        super(props);\n        this.threecanvas = React.createRef();\n    }\n    componentDidMount(){\n        console.log(THREE);\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n        var renderer = new THREE.WebGLRenderer();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        this.threecanvas.current.appendChild( renderer.domElement );\n        var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n        var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n        var cube = new THREE.Mesh( geometry, material );\n\n        // let mtlLoader = new MTLLoader();\n \n        // let objLoader = new OBJLoader();\n        \n        // mtlLoader.load('/hand.mtl', (materials) => {\n        //     materials.preload()\n        //     objLoader.setMaterials(materials)\n        //     objLoader.load('/hand.obj', (object) => {\n        //         scene.add(object)\n        //     })\n        // })\n        \n\n        scene.add( cube );\n        camera.position.z = 5;\n        var animate = function () {\n          requestAnimationFrame( animate );\n          cube.rotation.x += 0.01;\n          cube.rotation.y += 0.01;\n          renderer.render( scene, camera );\n        };\n        animate();\n    }\n    render(){\n        return (\n            <div id=\"three-container\" ref={this.threecanvas} />\n        )\n    }\n}\n\nexport default Scene;"]},"metadata":{},"sourceType":"module"}