{"ast":null,"code":"var _jsxFileName = \"/Users/jeremiproulx/Desktop/DEV/NEXTJS/test1/components/scene.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport * as THREE from 'three'; // import {MTLLoader, OBJLoader} from 'three-obj-mtl-loader';\n\nimport * as OBJLoader from 'three-obj-loader';\nOBJLoader(THREE); // var loader = new THREE.ObjectLoader();\n// loader.load(\n// \t// resource URL\n// \t\"models/json/example.json\",\n// \t// onLoad callback\n// \t// Here the loaded data is assumed to be an object\n// \tfunction ( obj ) {\n// \t\t// Add the loaded object to the scene\n// \t\tscene.add( obj );\n// \t},\n// \t// onProgress callback\n// \tfunction ( xhr ) {\n// \t\tconsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n// \t},\n// \t// onError callback\n// \tfunction ( err ) {\n// \t\tconsole.error( 'An error happened' );\n// \t}\n// );\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n    this.threecanvas = React.createRef();\n    this.THREE = THREE;\n  }\n\n  componentDidMount() {\n    // window.THREE = THREE; // THREE.NRRDLoader expects THREE to be a global object\n    // require('three/examples/js/loaders/TextureLoader');\n    var scene = new this.THREE.Scene();\n    var camera = new this.THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new this.THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.threecanvas.current.appendChild(renderer.domElement);\n    var geometry = new this.THREE.BoxGeometry(1, 1, 1);\n    var cube;\n    var loader = new this.THREE.TextureLoader(); // let mtlLoader = new MTLLoader();\n\n    let objLoader = new this.THREE.OBJLoader();\n    objLoader.load( // resource URL\n    '/hand.obj', // called when resource is loaded\n    function (object) {\n      scene.add(object);\n    }, // called when loading is in progresses\n    function (xhr) {\n      console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n    }, // called when loading has errors\n    function (error) {\n      console.log('An error happened');\n    }); // objLoader.setMaterials(materials)\n    // objLoader.load('/hand.obj', (object) => {\n    //     scene.add(object)\n    // })\n    // mtlLoader.load('/hand.mtl', (materials) => {\n    // materials.preload()\n    // objLoader.setMaterials(materials)\n    // objLoader.load('/hand.obj', (object) => {\n    //     scene.add(object)\n    // })\n    // })\n\n    loader.load('/logo.png', function (texture) {\n      // in this example we create the material when the texture is loaded\n      var material = new THREE.MeshBasicMaterial({\n        map: texture\n      });\n      cube = new THREE.Mesh(geometry, material);\n      scene.add(cube);\n      animate();\n    }); // var loader = new THREE.ObjectLoader();\n    // loader.load('/hand.obj',function ( object ) {\n    //         scene.add( object );\n    //     }\n    // );\n\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"three-container\",\n      ref: this.threecanvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/jeremiproulx/Desktop/DEV/NEXTJS/test1/components/scene.js"],"names":["React","Component","THREE","OBJLoader","Scene","constructor","props","threecanvas","createRef","componentDidMount","scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","current","appendChild","domElement","geometry","BoxGeometry","cube","loader","TextureLoader","objLoader","load","object","add","xhr","console","log","loaded","total","error","texture","material","MeshBasicMaterial","map","Mesh","animate","position","z","requestAnimationFrame","rotation","x","y","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\n// import {MTLLoader, OBJLoader} from 'three-obj-mtl-loader';\n\nimport * as OBJLoader from 'three-obj-loader';\nOBJLoader(THREE);\n\n\n// var loader = new THREE.ObjectLoader();\n\n// loader.load(\n// \t// resource URL\n// \t\"models/json/example.json\",\n\n// \t// onLoad callback\n// \t// Here the loaded data is assumed to be an object\n// \tfunction ( obj ) {\n// \t\t// Add the loaded object to the scene\n// \t\tscene.add( obj );\n// \t},\n\n// \t// onProgress callback\n// \tfunction ( xhr ) {\n// \t\tconsole.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n// \t},\n\n// \t// onError callback\n// \tfunction ( err ) {\n// \t\tconsole.error( 'An error happened' );\n// \t}\n// );\n\nclass Scene extends Component {\n    constructor(props){\n        super(props);\n        this.threecanvas = React.createRef();\n        this.THREE = THREE;\n    }\n    componentDidMount(){\n        // window.THREE = THREE; // THREE.NRRDLoader expects THREE to be a global object\n        // require('three/examples/js/loaders/TextureLoader');\n        \n        var scene = new this.THREE.Scene();\n        var camera = new this.THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n        var renderer = new this.THREE.WebGLRenderer();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        this.threecanvas.current.appendChild( renderer.domElement );\n        var geometry = new this.THREE.BoxGeometry( 1, 1, 1 );\n        var cube;\n\n        var loader = new this.THREE.TextureLoader();\n\n        // let mtlLoader = new MTLLoader();\n \n        let objLoader = new this.THREE.OBJLoader();\n\n        objLoader.load(\n            // resource URL\n            '/hand.obj',\n            // called when resource is loaded\n            function ( object ) {\n        \n                scene.add( object );\n        \n            },\n            // called when loading is in progresses\n            function ( xhr ) {\n        \n                console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\n        \n            },\n            // called when loading has errors\n            function ( error ) {\n        \n                console.log( 'An error happened' );\n        \n            }\n        );\n        \n\n        // objLoader.setMaterials(materials)\n        // objLoader.load('/hand.obj', (object) => {\n        //     scene.add(object)\n        // })\n        // mtlLoader.load('/hand.mtl', (materials) => {\n        // materials.preload()\n        // objLoader.setMaterials(materials)\n        // objLoader.load('/hand.obj', (object) => {\n        //     scene.add(object)\n        // })\n        // })\n\n        loader.load('/logo.png', function ( texture ) {\n                // in this example we create the material when the texture is loaded\n                var material = new THREE.MeshBasicMaterial( {\n                    map: texture\n                 } );\n\n                 cube = new THREE.Mesh( geometry, material );\n                 scene.add( cube );\n                 animate();\n            }\n        );\n\n        // var loader = new THREE.ObjectLoader();\n        // loader.load('/hand.obj',function ( object ) {\n        //         scene.add( object );\n\n        //     }\n        // );\n        \n        camera.position.z = 5;\n        var animate = function () {\n          requestAnimationFrame( animate );\n          cube.rotation.x += 0.01;\n          cube.rotation.y += 0.01;\n          renderer.render( scene, camera );\n        };\n        \n    }\n    render(){\n        return (\n            <div id=\"three-container\" ref={this.threecanvas} />\n        )\n    }\n}\n\nexport default Scene;"]},"metadata":{},"sourceType":"module"}